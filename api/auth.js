var request = require("request");
const querystring = require("querystring");

const app = require("../server");
const { generateRandomString } = require("../utils");

// Make sure to retrieve credentials from your Spotify API Dashboard.
var client_id = process.env.SPOTIFY_CLIENT_ID;
var client_secret = process.env.SPOTIFY_CLIENT_SECRET;
var redirect_uri = "http://localhost:8080/callback"; // Make sure to set callback URI on your Spotify API Dashboard as well.

// Defines a key for a cookie that will store the state parameter.
// The state parameter is often used in OAuth flows to prevent cross-site request forgery (CSRF) attacks.
// Part of an OAuth 2.0 authorization flow.
var stateKey = "spotify_auth_state";

/* ---------------- Authorization Code Flow ---------------- */
// [Documentation]: https://developer.spotify.com/documentation/web-api/tutorials/code-flow
// [Code]: https://github.com/spotify/web-api-examples/blob/master/authorization/authorization_code/app.js

// [1] Request User Authorization
// Request authorization from the user so that our app can access to the Spotify resources on the user's behalf.
// Request authorization using Express framework to initiates the authorization request.

// After Execution:
// Once the request is processed, the user will see the authorization dialog asking to authorize access within the user-read-private and user-read-email scopes.
// The Spotify OAuth 2.0 service presents details of the scopes for which access is being sought. If the user is not logged in, they are prompted to do so using their Spotify credentials. When the user is logged in, they are asked to authorize access to the data sets or features defined in the scopes.
// Finally, the user is redirected back to your specified redirect_uri. After the user accepts, or denies your request, the Spotify OAuth 2.0 service redirects the user back to your redirect_uri. In this example, the redirect address is https://localhost:8888/callback

app.get("/login", function (req, res) {
  var state = generateRandomString(16); // A unique value generated by the client (your application)
  var scope = "user-read-private user-read-email";

  // A method provided by the cookie-parser middleware.
  // Sets a HTTP cookie with the key defined by stateKey and the value of the state variable.
  // Then sends it back to the user's browser as part of the response, which allows the app to check the value of this state parameter to ensure the integrity of the OAuth flow (helps prevent CSRF attacks).
  res.cookie(stateKey, state);

  res.redirect(
    "https://accounts.spotify.com/authorize?" +
      querystring.stringify({
        response_type: "code", // Set to code. (*)
        client_id: client_id, // (*)
        scope: scope, // A space-separated list of scopes. If no scopes are specified, authorization will be granted only to access publicly available information: that is, only information normally visible in the Spotify desktop, web, and mobile players.
        redirect_uri: redirect_uri, // The URI to redirect to after the user grants or denies permission. (*)
        state: state, // This provides protection against attacks such as cross-site request forgery. (Optional but Recommended)
        // show_dialog: false, // Whether or not to force the user to approve the app again if theyâ€™ve already done so. If false (default), a user who has already approved the application may be automatically redirected to the URI specified by redirect_uri. If true, the user will not be automatically redirected and will have to approve the app again.
      })
  );
});

// [2] Request an Access Token
// If the user accepted your request, then your app is ready to exchange the authorization code for an access token.
// It can do this by sending a POST request to the /api/token endpoint.

// After Execution:
// On success, the response will have a 200 OK status and the following JSON data in the response body:
// - access_token: An access token that can be provided in subsequent calls, for example to Spotify Web API services.
// - token_type: How the access token may be used: always "Bearer".
// - scope: A space-separated list of scopes which have been granted for this access_token
// - expires_in: The time period (in seconds) for which the access token is valid.
// - refresh_token: See refreshing tokens (https://developer.spotify.com/documentation/web-api/tutorials/refreshing-tokens).
//   --> If your access token has expired, you can learn how to issue a new one without requiring users to reauthorize your application (https://developer.spotify.com/documentation/web-api/tutorials/refreshing-tokens).

app.get("/callback", function (req, res) {
  var code = req.query.code || null;
  var state = req.query.state || null;

  var storedState = req.cookies ? req.cookies[stateKey] : null;

  if (state === null || state !== storedState) {
    res.redirect(
      "/#" +
        querystring.stringify({
          error: "state_mismatch",
        })
    );
  } else {
    res.clearCookie(stateKey);

    var authOptions = {
      url: "https://accounts.spotify.com/api/token",
      form: {
        code: code, // The authorization code returned from the previous request. (*)
        redirect_uri: redirect_uri, // This parameter is used for validation only (there is no actual redirection). The value of this parameter must exactly match the value of redirect_uri supplied when requesting the authorization code. (*)
        grant_type: "authorization_code", // This field must contain the value "authorization_code". (*)
      },
      headers: {
        "content-type": "application/x-www-form-urlencoded", // Set to application/x-www-form-urlencoded. (*)
        // Base 64 encoded string that contains the client ID and client secret key. The field must have the format: Authorization: Basic <base64 encoded client_id:client_secret>. (*)
        Authorization:
          "Basic " +
          new Buffer.from(client_id + ":" + client_secret).toString("base64"),
      },
      json: true,
    };

    request.post(authOptions, function (error, response, body) {
      if (!error && response.statusCode === 200) {
        var access_token = body.access_token,
          refresh_token = body.refresh_token;

        var options = {
          url: "https://api.spotify.com/v1/me",
          headers: { Authorization: "Bearer " + access_token },
          json: true,
        };

        // use the access token to access the Spotify Web API
        // request.get(options, function (error, response, body) {
        //   console.log(body);
        // });

        // We can also pass the token to the browser to make requests from there
        res.redirect(
          "/#" +
            querystring.stringify({
              access_token: access_token,
              refresh_token: refresh_token,
            })
        );
      } else {
        res.redirect(
          "/#" +
            querystring.stringify({
              error: "invalid_token",
            })
        );
      }
    });
  }
});

/* ---------------- Refreshing Tokens ---------------- */
// [Documentation]: https://developer.spotify.com/documentation/web-api/tutorials/refreshing-tokens
// [Code]: https://github.com/spotify/web-api-examples/blob/master/authorization/authorization_code/app.js

// A refresh token is a security credential that allows client applications to obtain new access tokens without requiring users to reauthorize the application.
// Access tokens are intentionally configured to have a limited lifespan (1 hour), at the end of which, new tokens can be obtained by providing the original refresh token acquired during the authorization token request response:
/* 
    {
        "access_token": "NgCXRK...MzYjw",
        "token_type": "Bearer",
        "scope": "user-read-private user-read-email",
        "expires_in": 3600,
        "refresh_token": "NgAagA...Um_SHo"
    }
*/

// After Execution:
// You'll receive a 200 OK response (if everything goes well) which is very similar to the response when issuing an access token:
/*
    {
        access_token: 'BQBLuPRYBQ...BP8stIv5xr-Iwaf4l8eg',
        token_type: 'Bearer',
        expires_in: 3600,
        refresh_token: 'AQAQfyEFmJJuCvAFh...cG_m-2KTgNDaDMQqjrOa3',
        scope: 'user-read-email user-read-private'
    }
*/

// You will need to follow "A server side (nodeJS with express) Javascript method to refresh tokens issued under the Authorization Code flow."
app.get("/refresh_token", function (req, res) {
  var refresh_token = req.query.refresh_token;

  var authOptions = {
    url: "https://accounts.spotify.com/api/token",
    headers: {
      "content-type": "application/x-www-form-urlencoded", // Always set to application/x-www-form-urlencoded. (*)
      // Base 64 encoded string that contains the client ID and client secret key. The field must have the format: Authorization: Basic <base64 encoded client_id:client_secret> (*)
      Authorization:
        "Basic " +
        new Buffer.from(client_id + ":" + client_secret).toString("base64"),
    },
    form: {
      grant_type: "refresh_token", // Set it to refresh_token. (*)
      refresh_token: refresh_token, // The refresh token returned from the authorization token request. (*)
    },
    json: true,
  };

  request.post(authOptions, function (error, response, body) {
    if (!error && response.statusCode === 200) {
      var access_token = body.access_token,
        refresh_token = body.refresh_token;
      res.send({
        access_token: access_token,
        refresh_token: refresh_token,
      });
    }
  });
});
